#!/usr/bin/env python
from ansible.module_utils.basic import *

from mist.client import MistClient


def init_client(mist_uri="https://mist.io", email=None, password=None):
    client = MistClient(mist_uri, email, password)
    return client


def check_state(provider, client):
    backend_state = 'absent'
    backend_name = ''

    for key in client.backends:
        backend = client.backends[key]
        if backend.info['provider'] == provider:
            backend_state = 'present'
            break

    return backend_state


def remove_backend(provider, client):
    for key in client.backends:
        backend = client.backends[key]
        if backend.info['provider'] == provider:
            backend.delete()
            return


def add_backend(client, module):
    title = module.params.get('name')
    provider = module.params.get('provider')
    key = module.params.get('backend_key')
    secret = module.params.get('backend_secret')
    tenant_name = module.params.get('tenant_name')
    region = module.params.get('region')
    apiurl = module.params.get('api_url')
    machine_ip = module.params.get('machine_ip')
    machine_key = module.params.get('machine_key')
    machine_user = module.params.get('machine_user')
    compute_endpoint = module.params.get('compute_endpoint')
    machine_port = module.params.get('machine_port')

    client.add_backend(title, provider, key, secret, tenant_name, region, apiurl, machine_ip, machine_key, machine_user,
                       compute_endpoint, machine_port)

    client.update_backends()

    backend = client.backends[title]
    return backend.info


def main():
    CHANGED = False

    module = AnsibleModule(
        argument_spec=dict(
            provider=dict(required=True, type='str'),
            state=dict(required=False, default='present', choices=['present', 'absent']),
            # enabled=dict(required=False, default=True, type='bool'),
            name=dict(required=False, type='str'),
            backend_key=dict(required=False, type='str'),
            backend_secret=dict(required=False, type='str'),
            tenant_name=dict(required=False, type='str'),
            region=dict(required=False, type='str'),
            api_url=dict(required=False, type='str'),
            compute_endpoint=dict(required=False, type='str'),
            machine_ip=dict(required=False, type='str'),
            machine_key=dict(required=False, type='str'),
            machine_user=dict(required=False, type='str'),
            machine_port=dict(required=False, type='str'),
            mist_uri=dict(default='https://mist.io', type='str'),
            mist_email=dict(required=False, type='str'),
            mist_password=dict(required=False, type='str'),
        )
    )

    mist_uri = module.params.get('mist_uri')
    mist_email = module.params.get('mist_email')
    mist_password = module.params.get('mist_password')

    client = init_client(mist_uri, mist_email, mist_password)

    provider = module.params.get('provider')
    backend_state = check_state(provider, client)
    state = module.params.get('state')

    if backend_state == "present" and state == "present":
        CHANGED = False
        module.exit_json(changed=CHANGED)
    elif backend_state == "present" and state == "absent":
        remove_backend(provider, client)
        CHANGED = True
        module.exit_json(changed=CHANGED)
    elif backend_state == "absent" and state == "absent":
        CHANGED = False
        module.exit_json(changed=CHANGED)
    elif backend_state == "absent" and state == "present":
        CHANGED = True
        backend_info = add_backend(client, module)
        module.exit_json(changed=CHANGED, backend=backend_info)

main()