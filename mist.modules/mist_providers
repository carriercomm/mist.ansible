#!/usr/bin/env python
import os
import ConfigParser

from ansible.module_utils.basic import *

from mist.client import MistClient

DOCUMENTATION = '''
---
author: "Chris Loukas <commixon@gmail.com>"
description:
  - "Returns a list of all available providers that you can add and control through mist.io service"
module: mist_providers
options:
  mist_email:
    description:
      - "Email to login to the mist.io service"
    required: false
  mist_password:
    description:
      - "Password to login to the mist.io service"
    required: false
  mist_uri:
    default: "https://mist.io"
    description:
      - "Url of the mist.io service. By default https://mist.io. But if you have a custom installtion of mist.io you can provide the url here"
    required: false
  provider:
    choices:
      - ec2
      - rackspace
      - bare_metal
      - gce
      - openstack
      - linode
      - nephoscale
      - digitalocean
      - docker
      - hpcloud
      - softlayer
      - all
    default: all
    description:
      - "By default c== \"all\", whih returns all supported providers by the mist.io service."
      - "You can explicitly set it to one of the choices to see only this provider-specific information"
    required: false
requirements:
  - mist.client
short_description: "Lists all available providers in the mist.io service"

'''

EXAMPLES = '''
- name: List supported providers, simple case
  mist_providers:
    mist_email: your@email.com
    mist_password: yourpassword
  register: providers

- name: List supported providers from custom_url
  mist_providers:
    mist_uri: http://localhost:8000
  register: providers

- name: List only ec2 provider options
  mist_providers:
    mist_email: your@email.com
    mist_password: yourpassword
    provider: ec2
  register: providers
'''


def authenticate(uri, email, password):
    home_path = os.getenv("HOME")
    config_path = os.path.join(home_path, ".mist")

    if os.path.isfile(config_path):
        config = ConfigParser.ConfigParser()
        config.readfp(open(config_path))
    else:
        return uri, email, password

    if not uri:
        uri = config.get("mist.io", "mist_uri") or None
    if not email:
        email = config.get("mist.credentials", "email") or None
    if not password:
        email = config.get("mist.credentials", "password") or None

    client = init_client(mist_uri=uri, email=email, password=password)
    return client


def init_client(mist_uri="https://mist.io", email=None, password=None):
    client = MistClient(mist_uri, email, password)
    return client


def supported_providers(client, provider):
    providers = client.supported_providers

    if provider == "all":
        return providers
    else:
        chosen_providers = []
        for prov in providers:
            if provider in prov['provider']:
                chosen_providers.append(prov)
        return chosen_providers


def main():
    module = AnsibleModule(
        argument_spec=dict(
            mist_uri=dict(default='https://mist.io', type='str'),
            mist_email=dict(required=False, type='str'),
            mist_password=dict(required=False, type='str'),
            provider=dict(required=False, default='all', type='str', choices=['ec2', 'rackspace', 'bare_metal', 'gce',
                                                                              'openstack', 'linode', 'nephoscale',
                                                                              'digitalocean', 'docker', 'hpcloud',
                                                                              'softlayer', 'all'])
        )
    )

    mist_uri = module.params.get('mist_uri')
    mist_email = module.params.get('mist_email')
    mist_password = module.params.get('mist_password')
    provider = module.params.get('provider')

    client = authenticate(mist_uri, mist_email, mist_password)

    module.exit_json(changed=True, supported_providers=supported_providers(client, provider))


main()